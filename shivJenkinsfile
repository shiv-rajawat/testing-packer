import hudson.model.User.FullNameIdResolver

pipeline {
    agent any
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    stages {
    
        stage('Checkout') {
            steps {
              checkout scm
            }
        }
        stage('Build') {
            steps {
                script {
                    load "$WORKSPACE/pipeline-vars.groovy"
                    run("Build")
                }
            }
        }

        stage('Validate') {
            steps {
                script {
                   run("Validate")
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    run("Deploy")
                }
            }
        }

    }
}

def run(command) {
    def commands = [:]
    // for each defined step, walk through the name and invoke it if it matches the command
    PIPELINE_STEPS.each{ name, script ->
        if (name.toLowerCase().contains(command)) {
            commands["${name}"] = {
                stage("${name}") {

                    {
                        sh(script);
                    }
                }
            }
        }
    }
}

def formatStage(branch = env.BRANCH_NAME){
    return branch.replace("[^A-Za-z0-9]", "").toLowerCase()
}
